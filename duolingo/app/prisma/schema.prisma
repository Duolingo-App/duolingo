generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
enum QuestionType {
  TRANSLATE
  SELECT
  ARRANGE
  LISTEN
  SPEAK
}


   model Media {
     id        Int      @id @default(autoincrement())
     filename  String
     filepath  String
     mimetype  String
     size      Int
   }




model UserLanguage {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  flag        String
  users    User[] 
}
model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  password    String?
  name        String
  clerkId     String       @unique
  image       String?
  languageId  Int?         // Foreign key
  language    UserLanguage? @relation(fields: [languageId], references: [id])
  createdAt   DateTime     @default(now())
  progress    UserProgress[]
  attempts    UserAttempt[]
  points      UserPoint[]
  achievements UserAchievement[]
    hearts      Heart[]
  sentMessages Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}


model Heart{
  id          Int          @id @default(autoincrement())
  userId      Int
  heartCount  Int         @default(5)
  payment   Boolean
  createdAt   DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id])
}
model Language {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  units       Unit[]
  flag        String
}

model Unit {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  color       String
  guidebook  Boolean  @default(true)
  languageId  Int      // Foreign key to Language
  lessons     Lesson[] // A unit has many lessons
  language    Language @relation(fields: [languageId], references: [id])
}

model Lesson {
  id          Int          @id @default(autoincrement())
  unitId      Int 
  title       String
  description String?
  questions   Question[]
  progress    UserProgress[]
  
  unit    Unit   @relation(fields: [unitId], references: [id])
}

model Question {
  id            Int           @id @default(autoincrement())
  lessonId      Int
  text          String  
  options    String?
  hint       String?        // Store JSON array of multiple-choice options
  correctAnswer String
  type          String
  attempts      Attempt[]
  lesson        Lesson        @relation(fields: [lessonId], references: [id])
}

model UserProgress {
  id         Int       @id @default(autoincrement())
  userId     Int
  lessonId   Int
  completedAt DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])
  lesson     Lesson   @relation(fields: [lessonId], references: [id])
}
model UserAttempt {
  id         Int      @id @default(autoincrement())
  userId     Int
  questionId Int
  isCorrect  Boolean
  attemptedAt DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])
  // question   Question @relation(fields: [questionId], references: [id])
}

model UserPoint {
  id        Int      @id @default(autoincrement())
  userId    Int
  points    Int
  earnedAt  DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}

model Achievement {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  pointsRequired Int
  description String?
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            Int     @id @default(autoincrement())
  userId        Int
  achievementId Int
  unlockedAt    DateTime @default(now())

  user          User         @relation(fields: [userId], references: [id])
  achievement   Achievement  @relation(fields: [achievementId], references: [id])
}

model Attempt {
  id          Int      @id @default(autoincrement())
  questionId  Int
  isCorrect   Boolean
  answer      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  question    Question @relation(fields: [questionId], references: [id])
}